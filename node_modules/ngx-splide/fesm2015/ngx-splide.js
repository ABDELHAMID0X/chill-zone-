import * as i0 from '@angular/core';
import { Component, ViewChild, EventEmitter, PLATFORM_ID, ChangeDetectionStrategy, Inject, Input, Output, ContentChildren, NgModule } from '@angular/core';
import * as i1 from '@angular/common';
import { isPlatformBrowser, CommonModule } from '@angular/common';

class NgxSplideSlideComponent {
}
NgxSplideSlideComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: NgxSplideSlideComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
NgxSplideSlideComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: NgxSplideSlideComponent, selector: "splide-slide", viewQueries: [{ propertyName: "slideContent", first: true, predicate: ["slideContent"], descendants: true }], ngImport: i0, template: '<ng-template #slideContent><ng-content></ng-content></ng-template>', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: NgxSplideSlideComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'splide-slide',
                    template: '<ng-template #slideContent><ng-content></ng-content></ng-template>'
                }]
        }], propDecorators: { slideContent: [{
                type: ViewChild,
                args: ['slideContent']
            }] } });

class NgxSplideComponent {
    constructor(cdr, platformId) {
        this.cdr = cdr;
        this.platformId = platformId;
        this.selectedSlideIndexChange = new EventEmitter();
        this.options = {};
        this.containerClass = '';
        this.onInit = new EventEmitter();
        this.onSplideEvent = new EventEmitter();
        this.onMounted = new EventEmitter();
        this.onUpdated = new EventEmitter();
        this.onMove = new EventEmitter();
        this.onMoved = new EventEmitter();
        this.onDrag = new EventEmitter();
        this.onDragged = new EventEmitter();
        this.onVisible = new EventEmitter();
        this.onHidden = new EventEmitter();
        this.onActive = new EventEmitter();
        this.onInactive = new EventEmitter();
        this.onClick = new EventEmitter();
        this.onArrowsMounted = new EventEmitter();
        this.onArrowsUpdated = new EventEmitter();
        this.onPaginationMounted = new EventEmitter();
        this.onPaginationUpdated = new EventEmitter();
        this.onNavigationMounted = new EventEmitter();
        this.onAutoplayPlay = new EventEmitter();
        this.onAutoplayPause = new EventEmitter();
        this.onAutoplayPlaying = new EventEmitter();
        this.onLazyloadLoaded = new EventEmitter();
    }
    ngAfterViewInit() {
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        this.splide = new Splide(this.splideElement.nativeElement, this.options);
        if (this.syncWith) {
            this.splide.sync(this.syncWith.getSplideInstance());
        }
        this.onInit.emit(this.splide);
        this.mountSplideInstance();
        const slidesSubscription = this.slides.changes
            .subscribe((list) => {
            this.cdr.detectChanges();
            setTimeout(() => {
                this.remountSplideInstance();
            });
        });
        this.cdr.detectChanges();
    }
    ngOnChanges(changes) {
        if (!this.splide) {
            return;
        }
        if (changes['selectedSlideIndex']) {
            const currentIndex = changes['selectedSlideIndex'].currentValue;
            if (currentIndex !== this.splide.index) {
                this.splide.go(currentIndex);
            }
        }
        if (changes['options']) {
            this.splide.options = changes['options'].currentValue;
        }
    }
    addEventListeners() {
        this.splide
            .on('mounted', (...args) => {
            this.onMounted.emit(args);
            this.onSplideEvent.emit({
                name: 'mounted',
                args
            });
        })
            .on('updated', (...args) => {
            this.onUpdated.emit(args);
            this.onSplideEvent.emit({
                name: 'updated',
                args
            });
        })
            .on('move', (newIndex, oldIndex, destIndex) => {
            this.selectedSlideIndexChange.emit(newIndex);
            this.onMove.emit([newIndex, oldIndex, destIndex]);
            this.onSplideEvent.emit({
                name: 'move',
                args: [newIndex, oldIndex, destIndex]
            });
        })
            .on('moved', (...args) => {
            this.onMoved.emit(args);
            this.onSplideEvent.emit({
                name: 'moved',
                args
            });
        })
            .on('drag', (...args) => {
            this.onDrag.emit(args);
            this.onSplideEvent.emit({
                name: 'drag',
                args
            });
        })
            .on('dragged', (...args) => {
            this.onDragged.emit(args);
            this.onSplideEvent.emit({
                name: 'dragged',
                args
            });
        })
            .on('visible', (...args) => {
            this.onVisible.emit(args);
            this.onSplideEvent.emit({
                name: 'visible',
                args
            });
        })
            .on('hidden', (...args) => {
            this.onHidden.emit(args);
            this.onSplideEvent.emit({
                name: 'hidden',
                args
            });
        })
            .on('active', (...args) => {
            this.onActive.emit(args);
            this.onSplideEvent.emit({
                name: 'active',
                args
            });
        })
            .on('inactive', (...args) => {
            this.onInactive.emit(args);
            this.onSplideEvent.emit({
                name: 'inactive',
                args
            });
        })
            .on('click', (...args) => {
            this.onClick.emit(args);
            this.onSplideEvent.emit({
                name: 'click',
                args
            });
        })
            .on('arrows:mounted', (...args) => {
            this.onArrowsMounted.emit(args);
            this.onSplideEvent.emit({
                name: 'arrows:mounted',
                args
            });
        })
            .on('arrows:updated', (...args) => {
            this.onArrowsUpdated.emit(args);
            this.onSplideEvent.emit({
                name: 'arrows:updated',
                args
            });
        })
            .on('pagination:mounted', (...args) => {
            this.onPaginationMounted.emit(args);
            this.onSplideEvent.emit({
                name: 'pagination:mounted',
                args
            });
        })
            .on('pagination:updated', (...args) => {
            this.onPaginationUpdated.emit(args);
            this.onSplideEvent.emit({
                name: 'pagination:updated',
                args
            });
        })
            .on('navigation:mounted', (...args) => {
            this.onNavigationMounted.emit(args);
            this.onSplideEvent.emit({
                name: 'navigation:mounted',
                args
            });
        })
            .on('autoplay:play', (...args) => {
            this.onAutoplayPlay.emit(args);
            this.onSplideEvent.emit({
                name: 'autoplay:play',
                args
            });
        })
            .on('autoplay:pause', (...args) => {
            this.onAutoplayPause.emit(args);
            this.onSplideEvent.emit({
                name: 'autoplay:pause',
                args
            });
        })
            .on('autoplay:playing', (...args) => {
            this.onAutoplayPlaying.emit(args);
            this.onSplideEvent.emit({
                name: 'autoplay:playing',
                args
            });
        })
            .on('lazyload:loaded', (...args) => {
            this.onLazyloadLoaded.emit(args);
            this.onSplideEvent.emit({
                name: 'lazyload:loaded',
                args
            });
        });
    }
    getSplideInstance() {
        return this.splide;
    }
    mountSplideInstance() {
        this.splide.mount();
        this.addEventListeners();
    }
    remountSplideInstance() {
        console.log('remountSplideInstance');
        this.splide.destroy();
        this.mountSplideInstance();
    }
    ngOnDestroy() {
        if (this.splide) {
            this.splide.destroy(true);
        }
    }
}
NgxSplideComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: NgxSplideComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });
NgxSplideComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: NgxSplideComponent, selector: "splide", inputs: { selectedSlideIndex: "selectedSlideIndex", options: "options", containerClass: "containerClass", syncWith: "syncWith" }, outputs: { selectedSlideIndexChange: "selectedSlideIndexChange", onInit: "onInit", onSplideEvent: "onSplideEvent", onMounted: "onMounted", onUpdated: "onUpdated", onMove: "onMove", onMoved: "onMoved", onDrag: "onDrag", onDragged: "onDragged", onVisible: "onVisible", onHidden: "onHidden", onActive: "onActive", onInactive: "onInactive", onClick: "onClick", onArrowsMounted: "onArrowsMounted", onArrowsUpdated: "onArrowsUpdated", onPaginationMounted: "onPaginationMounted", onPaginationUpdated: "onPaginationUpdated", onNavigationMounted: "onNavigationMounted", onAutoplayPlay: "onAutoplayPlay", onAutoplayPause: "onAutoplayPause", onAutoplayPlaying: "onAutoplayPlaying", onLazyloadLoaded: "onLazyloadLoaded" }, queries: [{ propertyName: "slides", predicate: NgxSplideSlideComponent }], viewQueries: [{ propertyName: "splideElement", first: true, predicate: ["splideElement"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div #splideElement class=\"splide\" [ngClass]=\"containerClass\">\r\n    <div class=\"splide__track\">\r\n        <div class=\"splide__list\">\r\n            <div class=\"splide__slide\" *ngFor=\"let slide of slides;\">\r\n                <ng-template *ngIf=\"slide.slideContent\" [ngTemplateOutlet]=\"slide.slideContent\"></ng-template>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n", directives: [{ type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: NgxSplideComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'splide',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    templateUrl: './ngx-splide.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }]; }, propDecorators: { selectedSlideIndex: [{
                type: Input
            }], selectedSlideIndexChange: [{
                type: Output
            }], options: [{
                type: Input
            }], containerClass: [{
                type: Input
            }], syncWith: [{
                type: Input
            }], onInit: [{
                type: Output
            }], onSplideEvent: [{
                type: Output
            }], onMounted: [{
                type: Output
            }], onUpdated: [{
                type: Output
            }], onMove: [{
                type: Output
            }], onMoved: [{
                type: Output
            }], onDrag: [{
                type: Output
            }], onDragged: [{
                type: Output
            }], onVisible: [{
                type: Output
            }], onHidden: [{
                type: Output
            }], onActive: [{
                type: Output
            }], onInactive: [{
                type: Output
            }], onClick: [{
                type: Output
            }], onArrowsMounted: [{
                type: Output
            }], onArrowsUpdated: [{
                type: Output
            }], onPaginationMounted: [{
                type: Output
            }], onPaginationUpdated: [{
                type: Output
            }], onNavigationMounted: [{
                type: Output
            }], onAutoplayPlay: [{
                type: Output
            }], onAutoplayPause: [{
                type: Output
            }], onAutoplayPlaying: [{
                type: Output
            }], onLazyloadLoaded: [{
                type: Output
            }], slides: [{
                type: ContentChildren,
                args: [NgxSplideSlideComponent]
            }], splideElement: [{
                type: ViewChild,
                args: ['splideElement']
            }] } });

class NgxSplideModule {
}
NgxSplideModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: NgxSplideModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgxSplideModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: NgxSplideModule, declarations: [NgxSplideComponent, NgxSplideSlideComponent], imports: [CommonModule], exports: [NgxSplideComponent, NgxSplideSlideComponent] });
NgxSplideModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: NgxSplideModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: NgxSplideModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NgxSplideComponent, NgxSplideSlideComponent],
                    imports: [CommonModule],
                    exports: [NgxSplideComponent, NgxSplideSlideComponent]
                }]
        }] });

/*
 * Public API Surface of ngx-splide
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgxSplideComponent, NgxSplideModule, NgxSplideSlideComponent };
//# sourceMappingURL=ngx-splide.js.map
