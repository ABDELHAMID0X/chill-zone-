(function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
        typeof define === 'function' && define.amd ? define('ngx-splide', ['exports', '@angular/core', '@angular/common'], factory) :
        (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["ngx-splide"] = {}, global.ng.core, global.ng.common));
})(this, (function (exports, i0, i1) { 'use strict';

        function _interopNamespace(e) {
                if (e && e.__esModule) return e;
                var n = Object.create(null);
                if (e) {
                        Object.keys(e).forEach(function (k) {
                                if (k !== 'default') {
                                        var d = Object.getOwnPropertyDescriptor(e, k);
                                        Object.defineProperty(n, k, d.get ? d : {
                                                enumerable: true,
                                                get: function () { return e[k]; }
                                        });
                                }
                        });
                }
                n["default"] = e;
                return Object.freeze(n);
        }

        var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
        var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

        var NgxSplideSlideComponent = /** @class */ (function () {
            function NgxSplideSlideComponent() {
            }
            return NgxSplideSlideComponent;
        }());
        NgxSplideSlideComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: NgxSplideSlideComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
        NgxSplideSlideComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: NgxSplideSlideComponent, selector: "splide-slide", viewQueries: [{ propertyName: "slideContent", first: true, predicate: ["slideContent"], descendants: true }], ngImport: i0__namespace, template: '<ng-template #slideContent><ng-content></ng-content></ng-template>', isInline: true });
        i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: NgxSplideSlideComponent, decorators: [{
                    type: i0.Component,
                    args: [{
                            selector: 'splide-slide',
                            template: '<ng-template #slideContent><ng-content></ng-content></ng-template>'
                        }]
                }], propDecorators: { slideContent: [{
                        type: i0.ViewChild,
                        args: ['slideContent']
                    }] } });

        var NgxSplideComponent = /** @class */ (function () {
            function NgxSplideComponent(cdr, platformId) {
                this.cdr = cdr;
                this.platformId = platformId;
                this.selectedSlideIndexChange = new i0.EventEmitter();
                this.options = {};
                this.containerClass = '';
                this.onInit = new i0.EventEmitter();
                this.onSplideEvent = new i0.EventEmitter();
                this.onMounted = new i0.EventEmitter();
                this.onUpdated = new i0.EventEmitter();
                this.onMove = new i0.EventEmitter();
                this.onMoved = new i0.EventEmitter();
                this.onDrag = new i0.EventEmitter();
                this.onDragged = new i0.EventEmitter();
                this.onVisible = new i0.EventEmitter();
                this.onHidden = new i0.EventEmitter();
                this.onActive = new i0.EventEmitter();
                this.onInactive = new i0.EventEmitter();
                this.onClick = new i0.EventEmitter();
                this.onArrowsMounted = new i0.EventEmitter();
                this.onArrowsUpdated = new i0.EventEmitter();
                this.onPaginationMounted = new i0.EventEmitter();
                this.onPaginationUpdated = new i0.EventEmitter();
                this.onNavigationMounted = new i0.EventEmitter();
                this.onAutoplayPlay = new i0.EventEmitter();
                this.onAutoplayPause = new i0.EventEmitter();
                this.onAutoplayPlaying = new i0.EventEmitter();
                this.onLazyloadLoaded = new i0.EventEmitter();
            }
            NgxSplideComponent.prototype.ngAfterViewInit = function () {
                var _this = this;
                if (!i1.isPlatformBrowser(this.platformId)) {
                    return;
                }
                this.splide = new Splide(this.splideElement.nativeElement, this.options);
                if (this.syncWith) {
                    this.splide.sync(this.syncWith.getSplideInstance());
                }
                this.onInit.emit(this.splide);
                this.mountSplideInstance();
                var slidesSubscription = this.slides.changes
                    .subscribe(function (list) {
                    _this.cdr.detectChanges();
                    setTimeout(function () {
                        _this.remountSplideInstance();
                    });
                });
                this.cdr.detectChanges();
            };
            NgxSplideComponent.prototype.ngOnChanges = function (changes) {
                if (!this.splide) {
                    return;
                }
                if (changes['selectedSlideIndex']) {
                    var currentIndex = changes['selectedSlideIndex'].currentValue;
                    if (currentIndex !== this.splide.index) {
                        this.splide.go(currentIndex);
                    }
                }
                if (changes['options']) {
                    this.splide.options = changes['options'].currentValue;
                }
            };
            NgxSplideComponent.prototype.addEventListeners = function () {
                var _this = this;
                this.splide
                    .on('mounted', function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    _this.onMounted.emit(args);
                    _this.onSplideEvent.emit({
                        name: 'mounted',
                        args: args
                    });
                })
                    .on('updated', function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    _this.onUpdated.emit(args);
                    _this.onSplideEvent.emit({
                        name: 'updated',
                        args: args
                    });
                })
                    .on('move', function (newIndex, oldIndex, destIndex) {
                    _this.selectedSlideIndexChange.emit(newIndex);
                    _this.onMove.emit([newIndex, oldIndex, destIndex]);
                    _this.onSplideEvent.emit({
                        name: 'move',
                        args: [newIndex, oldIndex, destIndex]
                    });
                })
                    .on('moved', function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    _this.onMoved.emit(args);
                    _this.onSplideEvent.emit({
                        name: 'moved',
                        args: args
                    });
                })
                    .on('drag', function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    _this.onDrag.emit(args);
                    _this.onSplideEvent.emit({
                        name: 'drag',
                        args: args
                    });
                })
                    .on('dragged', function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    _this.onDragged.emit(args);
                    _this.onSplideEvent.emit({
                        name: 'dragged',
                        args: args
                    });
                })
                    .on('visible', function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    _this.onVisible.emit(args);
                    _this.onSplideEvent.emit({
                        name: 'visible',
                        args: args
                    });
                })
                    .on('hidden', function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    _this.onHidden.emit(args);
                    _this.onSplideEvent.emit({
                        name: 'hidden',
                        args: args
                    });
                })
                    .on('active', function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    _this.onActive.emit(args);
                    _this.onSplideEvent.emit({
                        name: 'active',
                        args: args
                    });
                })
                    .on('inactive', function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    _this.onInactive.emit(args);
                    _this.onSplideEvent.emit({
                        name: 'inactive',
                        args: args
                    });
                })
                    .on('click', function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    _this.onClick.emit(args);
                    _this.onSplideEvent.emit({
                        name: 'click',
                        args: args
                    });
                })
                    .on('arrows:mounted', function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    _this.onArrowsMounted.emit(args);
                    _this.onSplideEvent.emit({
                        name: 'arrows:mounted',
                        args: args
                    });
                })
                    .on('arrows:updated', function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    _this.onArrowsUpdated.emit(args);
                    _this.onSplideEvent.emit({
                        name: 'arrows:updated',
                        args: args
                    });
                })
                    .on('pagination:mounted', function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    _this.onPaginationMounted.emit(args);
                    _this.onSplideEvent.emit({
                        name: 'pagination:mounted',
                        args: args
                    });
                })
                    .on('pagination:updated', function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    _this.onPaginationUpdated.emit(args);
                    _this.onSplideEvent.emit({
                        name: 'pagination:updated',
                        args: args
                    });
                })
                    .on('navigation:mounted', function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    _this.onNavigationMounted.emit(args);
                    _this.onSplideEvent.emit({
                        name: 'navigation:mounted',
                        args: args
                    });
                })
                    .on('autoplay:play', function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    _this.onAutoplayPlay.emit(args);
                    _this.onSplideEvent.emit({
                        name: 'autoplay:play',
                        args: args
                    });
                })
                    .on('autoplay:pause', function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    _this.onAutoplayPause.emit(args);
                    _this.onSplideEvent.emit({
                        name: 'autoplay:pause',
                        args: args
                    });
                })
                    .on('autoplay:playing', function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    _this.onAutoplayPlaying.emit(args);
                    _this.onSplideEvent.emit({
                        name: 'autoplay:playing',
                        args: args
                    });
                })
                    .on('lazyload:loaded', function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    _this.onLazyloadLoaded.emit(args);
                    _this.onSplideEvent.emit({
                        name: 'lazyload:loaded',
                        args: args
                    });
                });
            };
            NgxSplideComponent.prototype.getSplideInstance = function () {
                return this.splide;
            };
            NgxSplideComponent.prototype.mountSplideInstance = function () {
                this.splide.mount();
                this.addEventListeners();
            };
            NgxSplideComponent.prototype.remountSplideInstance = function () {
                console.log('remountSplideInstance');
                this.splide.destroy();
                this.mountSplideInstance();
            };
            NgxSplideComponent.prototype.ngOnDestroy = function () {
                if (this.splide) {
                    this.splide.destroy(true);
                }
            };
            return NgxSplideComponent;
        }());
        NgxSplideComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: NgxSplideComponent, deps: [{ token: i0__namespace.ChangeDetectorRef }, { token: i0.PLATFORM_ID }], target: i0__namespace.ɵɵFactoryTarget.Component });
        NgxSplideComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: NgxSplideComponent, selector: "splide", inputs: { selectedSlideIndex: "selectedSlideIndex", options: "options", containerClass: "containerClass", syncWith: "syncWith" }, outputs: { selectedSlideIndexChange: "selectedSlideIndexChange", onInit: "onInit", onSplideEvent: "onSplideEvent", onMounted: "onMounted", onUpdated: "onUpdated", onMove: "onMove", onMoved: "onMoved", onDrag: "onDrag", onDragged: "onDragged", onVisible: "onVisible", onHidden: "onHidden", onActive: "onActive", onInactive: "onInactive", onClick: "onClick", onArrowsMounted: "onArrowsMounted", onArrowsUpdated: "onArrowsUpdated", onPaginationMounted: "onPaginationMounted", onPaginationUpdated: "onPaginationUpdated", onNavigationMounted: "onNavigationMounted", onAutoplayPlay: "onAutoplayPlay", onAutoplayPause: "onAutoplayPause", onAutoplayPlaying: "onAutoplayPlaying", onLazyloadLoaded: "onLazyloadLoaded" }, queries: [{ propertyName: "slides", predicate: NgxSplideSlideComponent }], viewQueries: [{ propertyName: "splideElement", first: true, predicate: ["splideElement"], descendants: true }], usesOnChanges: true, ngImport: i0__namespace, template: "<div #splideElement class=\"splide\" [ngClass]=\"containerClass\">\r\n    <div class=\"splide__track\">\r\n        <div class=\"splide__list\">\r\n            <div class=\"splide__slide\" *ngFor=\"let slide of slides;\">\r\n                <ng-template *ngIf=\"slide.slideContent\" [ngTemplateOutlet]=\"slide.slideContent\"></ng-template>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n", directives: [{ type: i1__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
        i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: NgxSplideComponent, decorators: [{
                    type: i0.Component,
                    args: [{
                            selector: 'splide',
                            changeDetection: i0.ChangeDetectionStrategy.OnPush,
                            templateUrl: './ngx-splide.component.html'
                        }]
                }], ctorParameters: function () {
                return [{ type: i0__namespace.ChangeDetectorRef }, { type: undefined, decorators: [{
                                type: i0.Inject,
                                args: [i0.PLATFORM_ID]
                            }] }];
            }, propDecorators: { selectedSlideIndex: [{
                        type: i0.Input
                    }], selectedSlideIndexChange: [{
                        type: i0.Output
                    }], options: [{
                        type: i0.Input
                    }], containerClass: [{
                        type: i0.Input
                    }], syncWith: [{
                        type: i0.Input
                    }], onInit: [{
                        type: i0.Output
                    }], onSplideEvent: [{
                        type: i0.Output
                    }], onMounted: [{
                        type: i0.Output
                    }], onUpdated: [{
                        type: i0.Output
                    }], onMove: [{
                        type: i0.Output
                    }], onMoved: [{
                        type: i0.Output
                    }], onDrag: [{
                        type: i0.Output
                    }], onDragged: [{
                        type: i0.Output
                    }], onVisible: [{
                        type: i0.Output
                    }], onHidden: [{
                        type: i0.Output
                    }], onActive: [{
                        type: i0.Output
                    }], onInactive: [{
                        type: i0.Output
                    }], onClick: [{
                        type: i0.Output
                    }], onArrowsMounted: [{
                        type: i0.Output
                    }], onArrowsUpdated: [{
                        type: i0.Output
                    }], onPaginationMounted: [{
                        type: i0.Output
                    }], onPaginationUpdated: [{
                        type: i0.Output
                    }], onNavigationMounted: [{
                        type: i0.Output
                    }], onAutoplayPlay: [{
                        type: i0.Output
                    }], onAutoplayPause: [{
                        type: i0.Output
                    }], onAutoplayPlaying: [{
                        type: i0.Output
                    }], onLazyloadLoaded: [{
                        type: i0.Output
                    }], slides: [{
                        type: i0.ContentChildren,
                        args: [NgxSplideSlideComponent]
                    }], splideElement: [{
                        type: i0.ViewChild,
                        args: ['splideElement']
                    }] } });

        var NgxSplideModule = /** @class */ (function () {
            function NgxSplideModule() {
            }
            return NgxSplideModule;
        }());
        NgxSplideModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: NgxSplideModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
        NgxSplideModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: NgxSplideModule, declarations: [NgxSplideComponent, NgxSplideSlideComponent], imports: [i1.CommonModule], exports: [NgxSplideComponent, NgxSplideSlideComponent] });
        NgxSplideModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: NgxSplideModule, imports: [[i1.CommonModule]] });
        i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: NgxSplideModule, decorators: [{
                    type: i0.NgModule,
                    args: [{
                            declarations: [NgxSplideComponent, NgxSplideSlideComponent],
                            imports: [i1.CommonModule],
                            exports: [NgxSplideComponent, NgxSplideSlideComponent]
                        }]
                }] });

        /*
         * Public API Surface of ngx-splide
         */

        /**
         * Generated bundle index. Do not edit.
         */

        exports.NgxSplideComponent = NgxSplideComponent;
        exports.NgxSplideModule = NgxSplideModule;
        exports.NgxSplideSlideComponent = NgxSplideSlideComponent;

        Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ngx-splide.umd.js.map
